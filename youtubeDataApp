import tkinter
from tkinter import ttk , messagebox
import pandas as pd
from apiclient.discovery import build
import sys


# ひな形
api_key = 'ここにAPIキーをいれる' 
api_service_name = 'youtube'
api_version = 'v3'
youtube = build(api_service_name, api_version, developerKey=api_key)


# メインウィンドウ
main_win = tkinter.Tk()
main_win.title("YouTubeから動画情報を取得しよう！")
main_win.geometry("500x200")

# メインフレーム
main_frm = ttk.Frame(main_win)
main_frm.grid(column=0, row=0, sticky=tkinter.NSEW, padx=5, pady=5)

# APIを動かす関数
def execute_api():
    global search_word , nums
    search_word = keyword_text.get()
    nums = int(count_value.get())
    result_list = []  # itemsを格納する用のリスト
    
    global final_data
    # search_word = input('検索ワードを入力してください:')  # 検索キーワード。ANDは「/」「,」 NOTは「-」 ORは「|」
    # nums = int(input('何回繰り返しますか？'))  # nums * 5個の動画情報を取得する

    # partには動画情報を含むsnippetを指定
    # order=並び替え方法
    # type=対象を選択（channel,playlist,videoのいずれか）
    request = youtube.search().list(q=search_word, part='snippet', type='video', order='viewCount')
    get_response = request.execute()  # APIを実行

    # nums * 5個の情報を取得する
    for i in range(nums):
        result_list = result_list + get_response['items']  # itemsをリストに入れ、そのリストと次の実行で得た情報を後ろに追加していく
        request = youtube.search().list_next(request, get_response)  # 1つ前のリクエストとレスポンスを引数に渡すことで次のデータを取得する
        get_response = request.execute()  # API実行

    data = pd.DataFrame(result_list)
    data2 = pd.DataFrame(list(data['id']))['videoId']
    data3 = pd.DataFrame(list(data['snippet']))[['channelTitle', 'publishedAt', 'channelId', 'title']]

    final_data = pd.concat([data2, data3], axis=1)  # 横方向に連結
    # 個別の動画ごとの統計情報を取得する関数
    def get_statistics(video_id):
        statistics_data = youtube.videos().list(part='statistics', id=video_id).execute()['items'][0]['statistics']
        return statistics_data
    global df_output
    # ラムダ関数で一意のvideo_idをget_statistics関数の引数として入れ、applyで全てのvideo_idにget_statistics関数を実行
    # video_idとstatistics_dataのデータフレームを作成(カラムは[['viewCount', 'likeCount', 'dislikeCount', 'commentCount']])
    df_static_data = pd.DataFrame(list(final_data['videoId'].apply(lambda x: get_statistics(x))))[
    ['viewCount', 'likeCount', 'dislikeCount', 'commentCount']]
    df_output = pd.concat([final_data, df_static_data], axis=1)  # 横方向に結合
    messagebox.showinfo("実行確認","データの取得が完了しました。CSVファイルに出力しましょう。")

    

def create_file():
    global file_name
    file_name = file_text.get()
    # DataFrameをcsvファイルへ出力する関数
    # ファイルがあればcsv作成
    try:
        #df_output
        df_output.to_csv(file_name, sep=',', index=False, encoding='utf-8_sig')
        messagebox.showinfo('出力成功' , file_name+'を確認してください。')
    except OSError as e:
        print(e)

def fin_program():
    messagebox.showinfo("終了","プログラムを正常に終了しました。")
    print("プログラムを終了しました。")
    sys.exit()
    
        





# ウィジェット作成（キーワード）
keyword_label = ttk.Label(main_frm, text="検索ワード" , font=("Arial", 10))
keyword_text = tkinter.StringVar()
keyword_box = ttk.Entry(main_frm, textvariable=keyword_text)

# # ウィジェット作成（回数）
count_list = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
              "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"]
count_label = ttk.Label(main_frm, text="何回実行する？", font=("Arial", 10))
count_value = tkinter.StringVar()
count_comb = ttk.Combobox(main_frm, values=count_list, textvariable=count_value, width=5)
count_comb.current(0)


# ウィジェット作成（ファイル名）
file_label = ttk.Label(main_frm, text="ファイル名入力", font=("Arial", 10))  # ファイルが存在しなくても自動で作成される
file_text = tkinter.StringVar()
file_box = ttk.Entry(main_frm, textvariable=file_text)


#  ウィジェット作成（実行ボタン）
app_btn1 = ttk.Button(main_frm, text="API実行" ,command=execute_api)
app_btn2 = ttk.Button(main_frm,text="CSV作成" ,command=create_file)
app_btn3 = ttk.Button(main_frm,text = "終了",command=fin_program)



# 検索ウィジェットの配置
keyword_label.grid(column=0, row=0, pady=10)
keyword_box.grid(column=2, row=0, sticky=tkinter.W)

# 実行回数ウィジェットの配置
count_label.grid(column=0, row=2,pady=10)
count_comb.grid(column=2, row=2, sticky=tkinter.W, padx=5)

# ファイル名ウィジェットの配置
file_label.grid(column=0, row=1, pady=10)
file_box.grid(column=2, row=1, sticky=tkinter.W)

# 実行ウィジェットの配置
app_btn1.grid(column=1, row=4)
app_btn2.grid(column=2, row=4)
app_btn3.grid(column=3, row=4)



# ウィンドウの表示  
main_win.mainloop()
